{"ts":1381265698973,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * Canonical API to handle WordPress Redirecting\n *\n * Based on \"Permalink Redirect\" from Scott Yang and \"Enforce www. Preference\"\n * by Mark Jaquith\n *\n * @package WordPress\n * @since 2.3.0\n */\n\n/**\n * Redirects incoming links to the proper URL based on the site url.\n *\n * Search engines consider www.somedomain.com and somedomain.com to be two\n * different URLs when they both go to the same location. This SEO enhancement\n * prevents penalty for duplicate content by redirecting all incoming links to\n * one or the other.\n *\n * Prevents redirection for feeds, trackbacks, searches, comment popup, and\n * admin URLs. Does not redirect on non-pretty-permalink-supporting IIS 7+,\n * page/post previews, WP admin, Trackbacks, robots.txt, searches, or on POST\n * requests.\n *\n * Will also attempt to find the correct link when a user enters a URL that does\n * not exist based on exact WordPress query. Will instead try to parse the URL\n * or query in an attempt to figure the correct page to go to.\n *\n * @since 2.3.0\n * @uses $wp_rewrite\n * @uses $is_IIS\n *\n * @param string $requested_url Optional. The URL that was requested, used to\n *\t\tfigure if redirect is needed.\n * @param bool $do_redirect Optional. Redirect to the new URL.\n * @return null|false|string Null, if redirect not needed. False, if redirect\n *\t\tnot needed or the string of the URL\n */\nfunction redirect_canonical( $requested_url = null, $do_redirect = true ) {\n\tglobal $wp_rewrite, $is_IIS, $wp_query, $wpdb;\n\n\tif ( is_trackback() || is_search() || is_comments_popup() || is_admin() || !empty($_POST) || is_preview() || is_robots() || ( $is_IIS && !iis7_supports_permalinks() ) )\n\t\treturn;\n\n\tif ( !$requested_url ) {\n\t\t// build the URL in the address bar\n\t\t$requested_url  = is_ssl() ? 'https://' : 'http://';\n\t\t$requested_url .= $_SERVER['HTTP_HOST'];\n\t\t$requested_url .= $_SERVER['REQUEST_URI'];\n\t}\n\n\t$original = @parse_url($requested_url);\n\tif ( false === $original )\n\t\treturn;\n\n\t// Some PHP setups turn requests for / into /index.php in REQUEST_URI\n\t// See: http://trac.wordpress.org/ticket/5017\n\t// See: http://trac.wordpress.org/ticket/7173\n\t// Disabled, for now:\n\t// $original['path'] = preg_replace('|/index\\.php$|', '/', $original['path']);\n\n\t$redirect = $original;\n\t$redirect_url = false;\n\n\t// Notice fixing\n\tif ( !isset($redirect['path']) )\n\t\t$redirect['path'] = '';\n\tif ( !isset($redirect['query']) )\n\t\t$redirect['query'] = '';\n\n\tif ( is_feed() && ( $id = get_query_var( 'p' ) ) ) {\n\t\tif ( $redirect_url = get_post_comments_feed_link( $id, get_query_var( 'feed' ) ) ) {\n\t\t\t$redirect['query'] = _remove_qs_args_if_not_in_url( $redirect['query'], array( 'p', 'page_id', 'attachment_id', 'pagename', 'name', 'post_type', 'feed'), $redirect_url );\n\t\t\t$redirect['path'] = parse_url( $redirect_url, PHP_URL_PATH );\n\t\t}\n\t}\n\n\tif ( is_singular() && 1 > $wp_query->post_count && ($id = get_query_var('p')) ) {\n\n\t\t$vars = $wpdb->get_results( $wpdb->prepare(\"SELECT post_type, post_parent FROM $wpdb->posts WHERE ID = %d\", $id) );\n\n\t\tif ( isset($vars[0]) && $vars = $vars[0] ) {\n\t\t\tif ( 'revision' == $vars->post_type && $vars->post_parent > 0 )\n\t\t\t\t$id = $vars->post_parent;\n\n\t\t\tif ( $redirect_url = get_permalink($id) )\n\t\t\t\t$redirect['query'] = _remove_qs_args_if_not_in_url( $redirect['query'], array( 'p', 'page_id', 'attachment_id', 'pagename', 'name', 'post_type' ), $redirect_url );\n\t\t}\n\t}\n\n\t// These tests give us a WP-generated permalink\n\tif ( is_404() ) {\n\n\t\t// Redirect ?page_id, ?p=, ?attachment_id= to their respective url's\n\t\t$id = max( get_query_var('p'), get_query_var('page_id'), get_query_var('attachment_id') );\n\t\tif ( $id && $redirect_post = get_post($id) ) {\n\t\t\t$post_type_obj = get_post_type_object($redirect_post->post_type);\n\t\t\tif ( $post_type_obj->public ) {\n\t\t\t\t$redirect_url = get_permalink($redirect_post);\n\t\t\t\t$redirect['query'] = _remove_qs_args_if_not_in_url( $redirect['query'], array( 'p', 'page_id', 'attachment_id', 'pagename', 'name', 'post_type' ), $redirect_url );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $redirect_url ) {\n\t\t\tif ( $redirect_url = redirect_guess_404_permalink() ) {\n\t\t\t\t$redirect['query'] = _remove_qs_args_if_not_in_url( $redirect['query'], array( 'page', 'feed', 'p', 'page_id', 'attachment_id', 'pagename', 'name', 'post_type' ), $redirect_url );\n\t\t\t}\n\t\t}\n\n\t} elseif ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() ) {\n\t\t// rewriting of old ?p=X, ?m=2004, ?m=200401, ?m=20040101\n\t\tif ( is_attachment() && !empty($_GET['attachment_id']) && ! $redirect_url ) {\n\t\t\tif ( $redirect_url = get_attachment_link(get_query_var('attachment_id')) )\n\t\t\t\t$redirect['query'] = remove_query_arg('attachment_id', $redirect['query']);\n\t\t} elseif ( is_single() && !empty($_GET['p']) && ! $redirect_url ) {\n\t\t\tif ( $redirect_url = get_permalink(get_query_var('p')) )\n\t\t\t\t$redirect['query'] = remove_query_arg(array('p', 'post_type'), $redirect['query']);\n\t\t} elseif ( is_single() && !empty($_GET['name'])  && ! $redirect_url ) {\n\t\t\tif ( $redirect_url = get_permalink( $wp_query->get_queried_object_id() ) )\n\t\t\t\t$redirect['query'] = remove_query_arg('name', $redirect['query']);\n\t\t} elseif ( is_page() && !empty($_GET['page_id']) && ! $redirect_url ) {\n\t\t\tif ( $redirect_url = get_permalink(get_query_var('page_id')) )\n\t\t\t\t$redirect['query'] = remove_query_arg('page_id', $redirect['query']);\n\t\t} elseif ( is_page() && !is_feed() && isset($wp_query->queried_object) && 'page' == get_option('show_on_front') && $wp_query->queried_object->ID == get_option('page_on_front')  && ! $redirect_url ) {\n\t\t\t$redirect_url = home_url('/');\n\t\t} elseif ( is_home() && !empty($_GET['page_id']) && 'page' == get_option('show_on_front') && get_query_var('page_id') == get_option('page_for_posts')  && ! $redirect_url ) {\n\t\t\tif ( $redirect_url = get_permalink(get_option('page_for_posts')) )\n\t\t\t\t$redirect['query'] = remove_query_arg('page_id', $redirect['query']);\n\t\t} elseif ( !empty($_GET['m']) && ( is_year() || is_month() || is_day() ) ) {\n\t\t\t$m = get_query_var('m');\n\t\t\tswitch ( strlen($m) ) {\n\t\t\t\tcase 4: // Yearly\n\t\t\t\t\t$redirect_url = get_year_link($m);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6: // Monthly\n\t\t\t\t\t$redirect_url = get_month_link( substr($m, 0, 4), substr($m, 4, 2) );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8: // Daily\n\t\t\t\t\t$redirect_url = get_day_link(substr($m, 0, 4), substr($m, 4, 2), substr($m, 6, 2));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( $redirect_url )\n\t\t\t\t$redirect['query'] = remove_query_arg('m', $redirect['query']);\n\t\t// now moving on to non ?m=X year/month/day links\n\t\t} elseif ( is_day() && get_query_var('year') && get_query_var('monthnum') && !empty($_GET['day']) ) {\n\t\t\tif ( $redirect_url = get_day_link(get_query_var('year'), get_query_var('monthnum'), get_query_var('day')) )\n\t\t\t\t$redirect['query'] = remove_query_arg(array('year', 'monthnum', 'day'), $redirect['query']);\n\t\t} elseif ( is_month() && get_query_var('year') && !empty($_GET['monthnum']) ) {\n\t\t\tif ( $redirect_url = get_month_link(get_query_var('year'), get_query_var('monthnum')) )\n\t\t\t\t$redirect['query'] = remove_query_arg(array('year', 'monthnum'), $redirect['query']);\n\t\t} elseif ( is_year() && !empty($_GET['year']) ) {\n\t\t\tif ( $redirect_url = get_year_link(get_query_var('year')) )\n\t\t\t\t$redirect['query'] = remove_query_arg('year', $redirect['query']);\n\t\t} elseif ( is_author() && !empty($_GET['author']) && preg_match( '|^[0-9]+$|', $_GET['author'] ) ) {\n\t\t\t$author = get_userdata(get_query_var('author'));\n\t\t\tif ( ( false !== $author ) && $wpdb->get_var( $wpdb->prepare( \"SELECT ID FROM $wpdb->posts WHERE $wpdb->posts.post_author = %d AND $wpdb->posts.post_status = 'publish' LIMIT 1\", $author->ID ) ) ) {\n\t\t\t\tif ( $redirect_url = get_author_posts_url($author->ID, $author->user_nicename) )\n\t\t\t\t\t$redirect['query'] = remove_query_arg('author', $redirect['query']);\n\t\t\t}\n\t\t} elseif ( is_category() || is_tag() || is_tax() ) { // Terms (Tags/categories)\n\n\t\t\t$term_count = 0;\n\t\t\tforeach ( $wp_query->tax_query->queries as $tax_query )\n\t\t\t\t$term_count += count( $tax_query['terms'] );\n\n\t\t\t$obj = $wp_query->get_queried_object();\n\t\t\tif ( $term_count <= 1 && !empty($obj->term_id) && ( $tax_url = get_term_link((int)$obj->term_id, $obj->taxonomy) ) && !is_wp_error($tax_url) ) {\n\t\t\t\tif ( !empty($redirect['query']) ) {\n\t\t\t\t\t// Strip taxonomy query vars off the url.\n\t\t\t\t\t$qv_remove = array( 'term', 'taxonomy');\n\t\t\t\t\tif ( is_category() ) {\n\t\t\t\t\t\t$qv_remove[] = 'category_name';\n\t\t\t\t\t\t$qv_remove[] = 'cat';\n\t\t\t\t\t} elseif ( is_tag() ) {\n\t\t\t\t\t\t$qv_remove[] = 'tag';\n\t\t\t\t\t\t$qv_remove[] = 'tag_id';\n\t\t\t\t\t} else { // Custom taxonomies will have a custom query var, remove those too:\n\t\t\t\t\t\t$tax_obj = get_taxonomy( $obj->taxonomy );\n\t\t\t\t\t\tif ( false !== $tax_obj->query_var )\n\t\t\t\t\t\t\t$qv_remove[] = $tax_obj->query_var;\n\t\t\t\t\t}\n\n\t\t\t\t\t$rewrite_vars = array_diff( array_keys($wp_query->query), array_keys($_GET) );\n\n\t\t\t\t\tif ( !array_diff($rewrite_vars, array_keys($_GET))  ) { // Check to see if all the Query vars are coming from the rewrite, none are set via $_GET\n\t\t\t\t\t\t$redirect['query'] = remove_query_arg($qv_remove, $redirect['query']); //Remove all of the per-tax qv's\n\n\t\t\t\t\t\t// Create the destination url for this taxonomy\n\t\t\t\t\t\t$tax_url = parse_url($tax_url);\n\t\t\t\t\t\tif ( ! empty($tax_url['query']) ) { // Taxonomy accessible via ?taxonomy=..&term=.. or any custom qv..\n\t\t\t\t\t\t\tparse_str($tax_url['query'], $query_vars);\n\t\t\t\t\t\t\t$redirect['query'] = add_query_arg($query_vars, $redirect['query']);\n\t\t\t\t\t\t} else { // Taxonomy is accessible via a \"pretty-URL\"\n\t\t\t\t\t\t\t$redirect['path'] = $tax_url['path'];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else { // Some query vars are set via $_GET. Unset those from $_GET that exist via the rewrite\n\t\t\t\t\t\tforeach ( $qv_remove as $_qv ) {\n\t\t\t\t\t\t\tif ( isset($rewrite_vars[$_qv]) )\n\t\t\t\t\t\t\t\t$redirect['query'] = remove_query_arg($_qv, $redirect['query']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t} elseif ( is_single() && strpos($wp_rewrite->permalink_structure, '%category%') !== false && $cat = get_query_var( 'category_name' ) ) {\n\t\t\t$category = get_category_by_path( $cat );\n\t\t\t$post_terms = wp_get_object_terms($wp_query->get_queried_object_id(), 'category', array('fields' => 'tt_ids'));\n\t\t\tif ( (!$category || is_wp_error($category)) || ( !is_wp_error($post_terms) && !empty($post_terms) && !in_array($category->term_taxonomy_id, $post_terms) ) )\n\t\t\t\t$redirect_url = get_permalink($wp_query->get_queried_object_id());\n\t\t}\n\n\t\t// Post Paging\n\t\tif ( is_singular() && ! is_front_page() && get_query_var('page') ) {\n\t\t\tif ( !$redirect_url )\n\t\t\t\t$redirect_url = get_permalink( get_queried_object_id() );\n\t\t\t$redirect_url = trailingslashit( $redirect_url ) . user_trailingslashit( get_query_var( 'page' ), 'single_paged' );\n\t\t\t$redirect['query'] = remove_query_arg( 'page', $redirect['query'] );\n\t\t}\n\n\t\t// paging and feeds\n\t\tif ( get_query_var('paged') || is_feed() || get_query_var('cpage') ) {\n\t\t\twhile ( preg_match( \"#/$wp_rewrite->pagination_base/?[0-9]+?(/+)?$#\", $redirect['path'] ) || preg_match( '#/(comments/?)?(feed|rss|rdf|atom|rss2)(/+)?$#', $redirect['path'] ) || preg_match( '#/comment-page-[0-9]+(/+)?$#', $redirect['path'] ) ) {\n\t\t\t\t// Strip off paging and feed\n\t\t\t\t$redirect['path'] = preg_replace(\"#/$wp_rewrite->pagination_base/?[0-9]+?(/+)?$#\", '/', $redirect['path']); // strip off any existing paging\n\t\t\t\t$redirect['path'] = preg_replace('#/(comments/?)?(feed|rss2?|rdf|atom)(/+|$)#', '/', $redirect['path']); // strip off feed endings\n\t\t\t\t$redirect['path'] = preg_replace('#/comment-page-[0-9]+?(/+)?$#', '/', $redirect['path']); // strip off any existing comment paging\n\t\t\t}\n\n\t\t\t$addl_path = '';\n\t\t\tif ( is_feed() && in_array( get_query_var('feed'), $wp_rewrite->feeds ) ) {\n\t\t\t\t$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';\n\t\t\t\tif ( !is_singular() && get_query_var( 'withcomments' ) )\n\t\t\t\t\t$addl_path .= 'comments/';\n\t\t\t\tif ( ( 'rss' == get_default_feed() && 'feed' == get_query_var('feed') ) || 'rss' == get_query_var('feed') )\n\t\t\t\t\t$addl_path .= user_trailingslashit( 'feed/' . ( ( get_default_feed() == 'rss2' ) ? '' : 'rss2' ), 'feed' );\n\t\t\t\telse\n\t\t\t\t\t$addl_path .= user_trailingslashit( 'feed/' . ( ( get_default_feed() ==  get_query_var('feed') || 'feed' == get_query_var('feed') ) ? '' : get_query_var('feed') ), 'feed' );\n\t\t\t\t$redirect['query'] = remove_query_arg( 'feed', $redirect['query'] );\n\t\t\t} elseif ( is_feed() && 'old' == get_query_var('feed') ) {\n\t\t\t\t$old_feed_files = array(\n\t\t\t\t\t'wp-atom.php'         => 'atom',\n\t\t\t\t\t'wp-commentsrss2.php' => 'comments_rss2',\n\t\t\t\t\t'wp-feed.php'         => get_default_feed(),\n\t\t\t\t\t'wp-rdf.php'          => 'rdf',\n\t\t\t\t\t'wp-rss.php'          => 'rss2',\n\t\t\t\t\t'wp-rss2.php'         => 'rss2',\n\t\t\t\t);\n\t\t\t\tif ( isset( $old_feed_files[ basename( $redirect['path'] ) ] ) ) {\n\t\t\t\t\t$redirect_url = get_feed_link( $old_feed_files[ basename( $redirect['path'] ) ] );\n\t\t\t\t\twp_redirect( $redirect_url, 301 );\n\t\t\t\t\tdie();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( get_query_var('paged') > 0 ) {\n\t\t\t\t$paged = get_query_var('paged');\n\t\t\t\t$redirect['query'] = remove_query_arg( 'paged', $redirect['query'] );\n\t\t\t\tif ( !is_feed() ) {\n\t\t\t\t\tif ( $paged > 1 && !is_single() ) {\n\t\t\t\t\t\t$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit(\"$wp_rewrite->pagination_base/$paged\", 'paged');\n\t\t\t\t\t} elseif ( !is_single() ) {\n\t\t\t\t\t\t$addl_path = !empty( $addl_path ) ? trailingslashit($addl_path) : '';\n\t\t\t\t\t}\n\t\t\t\t} elseif ( $paged > 1 ) {\n\t\t\t\t\t$redirect['query'] = add_query_arg( 'paged', $paged, $redirect['query'] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( get_option('page_comments') && ( ( 'newest' == get_option('default_comments_page') && get_query_var('cpage') > 0 ) || ( 'newest' != get_option('default_comments_page') && get_query_var('cpage') > 1 ) ) ) {\n\t\t\t\t$addl_path = ( !empty( $addl_path ) ? trailingslashit($addl_path) : '' ) . user_trailingslashit( 'comment-page-' . get_query_var('cpage'), 'commentpaged' );\n\t\t\t\t$redirect['query'] = remove_query_arg( 'cpage', $redirect['query'] );\n\t\t\t}\n\n\t\t\t$redirect['path'] = user_trailingslashit( preg_replace('|/' . preg_quote( $wp_rewrite->index, '|' ) . '/?$|', '/', $redirect['path']) ); // strip off trailing /index.php/\n\t\t\tif ( !empty( $addl_path ) && $wp_rewrite->using_index_permalinks() && strpos($redirect['path'], '/' . $wp_rewrite->index . '/') === false )\n\t\t\t\t$redirect['path'] = trailingslashit($redirect['path']) . $wp_rewrite->index . '/';\n\t\t\tif ( !empty( $addl_path ) )\n\t\t\t\t$redirect['path'] = trailingslashit($redirect['path']) . $addl_path;\n\t\t\t$redirect_url = $redirect['scheme'] . '://' . $redirect['host'] . $redirect['path'];\n\t\t}\n\n\t\tif ( 'wp-register.php' == basename( $redirect['path'] ) ) {\n\t\t\tif ( is_multisite() )\n\t\t\t\t$redirect_url = apply_filters( 'wp_signup_location', network_site_url( 'wp-signup.php' ) );\n\t\t\telse\n\t\t\t\t$redirect_url = site_url( 'wp-login.php?action=register' );\n\t\t\twp_redirect( $redirect_url, 301 );\n\t\t\tdie();\n\t\t}\n\t}\n\n\t// tack on any additional query vars\n\t$redirect['query'] = preg_replace( '#^\\??&*?#', '', $redirect['query'] );\n\tif ( $redirect_url && !empty($redirect['query']) ) {\n\t\tparse_str( $redirect['query'], $_parsed_query );\n\t\t$redirect = @parse_url($redirect_url);\n\n\t\tif ( ! empty( $_parsed_query['name'] ) && ! empty( $redirect['query'] ) ) {\n\t\t\tparse_str( $redirect['query'], $_parsed_redirect_query );\n\n\t\t\tif ( empty( $_parsed_redirect_query['name'] ) )\n\t\t\t\tunset( $_parsed_query['name'] );\n\t\t}\n\n\t\t$_parsed_query = rawurlencode_deep( $_parsed_query );\n\t\t$redirect_url = add_query_arg( $_parsed_query, $redirect_url );\n\t}\n\n\tif ( $redirect_url )\n\t\t$redirect = @parse_url($redirect_url);\n\n\t// www.example.com vs example.com\n\t$user_home = @parse_url(home_url());\n\tif ( !empty($user_home['host']) )\n\t\t$redirect['host'] = $user_home['host'];\n\tif ( empty($user_home['path']) )\n\t\t$user_home['path'] = '/';\n\n\t// Handle ports\n\tif ( !empty($user_home['port']) )\n\t\t$redirect['port'] = $user_home['port'];\n\telse\n\t\tunset($redirect['port']);\n\n\t// trailing /index.php\n\t$redirect['path'] = preg_replace('|/' . preg_quote( $wp_rewrite->index, '|' ) . '/*?$|', '/', $redirect['path']);\n\n\t// Remove trailing spaces from the path\n\t$redirect['path'] = preg_replace( '#(%20| )+$#', '', $redirect['path'] );\n\n\tif ( !empty( $redirect['query'] ) ) {\n\t\t// Remove trailing spaces from certain terminating query string args\n\t\t$redirect['query'] = preg_replace( '#((p|page_id|cat|tag)=[^&]*?)(%20| )+$#', '$1', $redirect['query'] );\n\n\t\t// Clean up empty query strings\n\t\t$redirect['query'] = trim(preg_replace( '#(^|&)(p|page_id|cat|tag)=?(&|$)#', '&', $redirect['query']), '&');\n\n\t\t// Redirect obsolete feeds\n\t\t$redirect['query'] = preg_replace( '#(^|&)feed=rss(&|$)#', '$1feed=rss2$2', $redirect['query'] );\n\n\t\t// Remove redundant leading ampersands\n\t\t$redirect['query'] = preg_replace( '#^\\??&*?#', '', $redirect['query'] );\n\t}\n\n\t// strip /index.php/ when we're not using PATHINFO permalinks\n\tif ( !$wp_rewrite->using_index_permalinks() )\n\t\t$redirect['path'] = str_replace( '/' . $wp_rewrite->index . '/', '/', $redirect['path'] );\n\n\t// trailing slashes\n\tif ( is_object($wp_rewrite) && $wp_rewrite->using_permalinks() && !is_404() && (!is_front_page() || ( is_front_page() && (get_query_var('paged') > 1) ) ) ) {\n\t\t$user_ts_type = '';\n\t\tif ( get_query_var('paged') > 0 ) {\n\t\t\t$user_ts_type = 'paged';\n\t\t} else {\n\t\t\tforeach ( array('single', 'category', 'page', 'day', 'month', 'year', 'home') as $type ) {\n\t\t\t\t$func = 'is_' . $type;\n\t\t\t\tif ( call_user_func($func) ) {\n\t\t\t\t\t$user_ts_type = $type;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$redirect['path'] = user_trailingslashit($redirect['path'], $user_ts_type);\n\t} elseif ( is_front_page() ) {\n\t\t$redirect['path'] = trailingslashit($redirect['path']);\n\t}\n\n\t// Strip multiple slashes out of the URL\n\tif ( strpos($redirect['path'], '//') > -1 )\n\t\t$redirect['path'] = preg_replace('|/+|', '/', $redirect['path']);\n\n\t// Always trailing slash the Front Page URL\n\tif ( trailingslashit( $redirect['path'] ) == trailingslashit( $user_home['path'] ) )\n\t\t$redirect['path'] = trailingslashit($redirect['path']);\n\n\t// Ignore differences in host capitalization, as this can lead to infinite redirects\n\t// Only redirect no-www <=> yes-www\n\tif ( strtolower($original['host']) == strtolower($redirect['host']) ||\n\t\t( strtolower($original['host']) != 'www.' . strtolower($redirect['host']) && 'www.' . strtolower($original['host']) != strtolower($redirect['host']) ) )\n\t\t$redirect['host'] = $original['host'];\n\n\t$compare_original = array($original['host'], $original['path']);\n\n\tif ( !empty( $original['port'] ) )\n\t\t$compare_original[] = $original['port'];\n\n\tif ( !empty( $original['query'] ) )\n\t\t$compare_original[] = $original['query'];\n\n\t$compare_redirect = array($redirect['host'], $redirect['path']);\n\n\tif ( !empty( $redirect['port'] ) )\n\t\t$compare_redirect[] = $redirect['port'];\n\n\tif ( !empty( $redirect['query'] ) )\n\t\t$compare_redirect[] = $redirect['query'];\n\n\tif ( $compare_original !== $compare_redirect ) {\n\t\t$redirect_url = $redirect['scheme'] . '://' . $redirect['host'];\n\t\tif ( !empty($redirect['port']) )\n\t\t\t$redirect_url .= ':' . $redirect['port'];\n\t\t$redirect_url .= $redirect['path'];\n\t\tif ( !empty($redirect['query']) )\n\t\t\t$redirect_url .= '?' . $redirect['query'];\n\t}\n\n\tif ( !$redirect_url || $redirect_url == $requested_url )\n\t\treturn false;\n\n\t// Hex encoded octets are case-insensitive.\n\tif ( false !== strpos($requested_url, '%') ) {\n\t\tif ( !function_exists('lowercase_octets') ) {\n\t\t\tfunction lowercase_octets($matches) {\n\t\t\t\treturn strtolower( $matches[0] );\n\t\t\t}\n\t\t}\n\t\t$requested_url = preg_replace_callback('|%[a-fA-F0-9][a-fA-F0-9]|', 'lowercase_octets', $requested_url);\n\t}\n\n\t// Note that you can use the \"redirect_canonical\" filter to cancel a canonical redirect for whatever reason by returning false\n\t$redirect_url = apply_filters('redirect_canonical', $redirect_url, $requested_url);\n\n\tif ( !$redirect_url || $redirect_url == $requested_url ) // yes, again -- in case the filter aborted the request\n\t\treturn false;\n\n\tif ( $do_redirect ) {\n\t\t// protect against chained redirects\n\t\tif ( !redirect_canonical($redirect_url, false) ) {\n\t\t\twp_redirect($redirect_url, 301);\n\t\t\texit();\n\t\t} else {\n\t\t\t// Debug\n\t\t\t// die(\"1: $redirect_url<br />2: \" . redirect_canonical( $redirect_url, false ) );\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn $redirect_url;\n\t}\n}\n\n/**\n * Removes arguments from a query string if they are not present in a URL\n * DO NOT use this in plugin code.\n *\n * @since 3.4\n * @access private\n *\n * @return string The altered query string\n */\nfunction _remove_qs_args_if_not_in_url( $query_string, Array $args_to_check, $url ) {\n\t$parsed_url = @parse_url( $url );\n\tif ( ! empty( $parsed_url['query'] ) ) {\n\t\tparse_str( $parsed_url['query'], $parsed_query );\n\t\tforeach ( $args_to_check as $qv ) {\n\t\t\tif ( !isset( $parsed_query[$qv] ) )\n\t\t\t\t$query_string = remove_query_arg( $qv, $query_string );\n\t\t}\n\t} else {\n\t\t$query_string = remove_query_arg( $args_to_check, $query_string );\n\t}\n\treturn $query_string;\n}\n\n/**\n * Attempts to guess the correct URL based on query vars\n *\n * @since 2.3.0\n * @uses $wpdb\n *\n * @return bool|string The correct URL if one is found. False on failure.\n */\nfunction redirect_guess_404_permalink() {\n\tglobal $wpdb, $wp_rewrite;\n\n\tif ( get_query_var('name') ) {\n\t\t$where = $wpdb->prepare(\"post_name LIKE %s\", like_escape( get_query_var('name') ) . '%');\n\n\t\t// if any of post_type, year, monthnum, or day are set, use them to refine the query\n\t\tif ( get_query_var('post_type') )\n\t\t\t$where .= $wpdb->prepare(\" AND post_type = %s\", get_query_var('post_type'));\n\t\telse\n\t\t\t$where .= \" AND post_type IN ('\" . implode( \"', '\", get_post_types( array( 'public' => true ) ) ) . \"')\";\n\n\t\tif ( get_query_var('year') )\n\t\t\t$where .= $wpdb->prepare(\" AND YEAR(post_date) = %d\", get_query_var('year'));\n\t\tif ( get_query_var('monthnum') )\n\t\t\t$where .= $wpdb->prepare(\" AND MONTH(post_date) = %d\", get_query_var('monthnum'));\n\t\tif ( get_query_var('day') )\n\t\t\t$where .= $wpdb->prepare(\" AND DAYOFMONTH(post_date) = %d\", get_query_var('day'));\n\n\t\t$post_id = $wpdb->get_var(\"SELECT ID FROM $wpdb->posts WHERE $where AND post_status = 'publish'\");\n\t\tif ( ! $post_id )\n\t\t\treturn false;\n\t\tif ( get_query_var( 'feed' ) )\n\t\t\treturn get_post_comments_feed_link( $post_id, get_query_var( 'feed' ) );\n\t\telseif ( get_query_var( 'page' ) )\n\t\t\treturn trailingslashit( get_permalink( $post_id ) ) . user_trailingslashit( get_query_var( 'page' ), 'single_paged' );\n\t\telse\n\t\t\treturn get_permalink( $post_id );\n\t}\n\n\treturn false;\n}\n\nadd_action('template_redirect', 'redirect_canonical');\n\nfunction wp_redirect_admin_locations() {\n\tglobal $wp_rewrite;\n\tif ( ! ( is_404() && $wp_rewrite->using_permalinks() ) )\n\t\treturn;\n\n\t$admins = array(\n\t\thome_url( 'wp-admin', 'relative' ),\n\t\thome_url( 'dashboard', 'relative' ),\n\t\thome_url( 'admin', 'relative' ),\n\t\tsite_url( 'dashboard', 'relative' ),\n\t\tsite_url( 'admin', 'relative' ),\n\t);\n\tif ( in_array( untrailingslashit( $_SERVER['REQUEST_URI'] ), $admins ) ) {\n\t\twp_redirect( admin_url() );\n\t\texit;\n\t}\n\n\t$logins = array(\n\t\thome_url( 'wp-login.php', 'relative' ),\n\t\thome_url( 'login', 'relative' ),\n\t\tsite_url( 'login', 'relative' ),\n\t);\n\tif ( in_array( untrailingslashit( $_SERVER['REQUEST_URI'] ), $logins ) ) {\n\t\twp_redirect( site_url( 'wp-login.php', 'login' ) );\n\t\texit;\n\t}\n}\n\nadd_action( 'template_redirect', 'wp_redirect_admin_locations', 1000 );\n"]],"start1":0,"start2":0,"length1":0,"length2":23151}]],"length":23151}
