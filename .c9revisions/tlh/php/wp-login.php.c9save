{"ts":1381411247540,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * WordPress User Page\n *\n * Handles authentication, registering, resetting passwords, forgot password,\n * and other user handling.\n *\n * @package WordPress\n */\n\n/** Make sure that the WordPress bootstrap has run before continuing. */\nrequire( dirname(__FILE__) . '/wp-load.php' );\n\n// Redirect to https login if forced to use SSL\nif ( force_ssl_admin() && ! is_ssl() ) {\n\tif ( 0 === strpos($_SERVER['REQUEST_URI'], 'http') ) {\n\t\twp_redirect( set_url_scheme( $_SERVER['REQUEST_URI'], 'https' ) );\n\t\texit();\n\t} else {\n\t\twp_redirect( 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t\texit();\n\t}\n}\n\n/**\n * Outputs the header for the login page.\n *\n * @uses do_action() Calls the 'login_head' for outputting HTML in the Log In\n *\t\theader.\n * @uses apply_filters() Calls 'login_headerurl' for the top login link.\n * @uses apply_filters() Calls 'login_headertitle' for the top login title.\n * @uses apply_filters() Calls 'login_message' on the message to display in the\n *\t\theader.\n * @uses $error The error global, which is checked for displaying errors.\n *\n * @param string $title Optional. WordPress Log In Page title to display in\n *\t\t<title/> element.\n * @param string $message Optional. Message to display in header.\n * @param WP_Error $wp_error Optional. WordPress Error Object\n */\nfunction login_header($title = 'Log In', $message = '', $wp_error = '') {\n\tglobal $error, $interim_login, $current_site, $action;\n\n\t// Don't index any of these forms\n\tadd_action( 'login_head', 'wp_no_robots' );\n\n\tif ( empty($wp_error) )\n\t\t$wp_error = new WP_Error();\n\n\t// Shake it!\n\t$shake_error_codes = array( 'empty_password', 'empty_email', 'invalid_email', 'invalidcombo', 'empty_username', 'invalid_username', 'incorrect_password' );\n\t$shake_error_codes = apply_filters( 'shake_error_codes', $shake_error_codes );\n\n\tif ( $shake_error_codes && $wp_error->get_error_code() && in_array( $wp_error->get_error_code(), $shake_error_codes ) )\n\t\tadd_action( 'login_head', 'wp_shake_js', 12 );\n\n\t?><!DOCTYPE html>\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\" <?php language_attributes(); ?>>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"<?php bloginfo('html_type'); ?>; charset=<?php bloginfo('charset'); ?>\" />\n\t<title><?php bloginfo('name'); ?> &rsaquo; <?php echo $title; ?></title>\n\t<?php\n\n\twp_admin_css( 'wp-admin', true );\n\twp_admin_css( 'colors-fresh', true );\n\n\tif ( wp_is_mobile() ) { ?>\n\t\t<meta name=\"viewport\" content=\"width=320, initial-scale=0.9, maximum-scale=1.0, user-scalable=0\" /><?php\n\t}\n\n\t// Remove all stored post data on logging out.\n\t// This could be added by add_action('login_head'...) like wp_shake_js()\n\t// but maybe better if it's not removable by plugins\n\tif ( 'loggedout' == $wp_error->get_error_code() ) {\n\t\t?>\n\t\t<script>if(\"sessionStorage\" in window){try{for(var key in sessionStorage){if(key.indexOf(\"wp-autosave-\")!=-1){sessionStorage.removeItem(key)}}}catch(e){}};</script>\n\t\t<?php\n\t}\n\n\tdo_action( 'login_enqueue_scripts' );\n\tdo_action( 'login_head' );\n\n\tif ( is_multisite() ) {\n\t\t$login_header_url   = network_home_url();\n\t\t$login_header_title = $current_site->site_name;\n\t} else {\n\t\t$login_header_url   = __( 'http://wordpress.org/' );\n\t\t$login_header_title = __( 'Powered by WordPress' );\n\t}\n\n\t$login_header_url   = apply_filters( 'login_headerurl',   $login_header_url   );\n\t$login_header_title = apply_filters( 'login_headertitle', $login_header_title );\n\n\t$classes = array( 'login-action-' . $action, 'wp-core-ui' );\n\tif ( wp_is_mobile() )\n\t\t$classes[] = 'mobile';\n\tif ( is_rtl() )\n\t\t$classes[] = 'rtl';\n\tif ( $interim_login ) {\n\t\t$classes[] = 'interim-login';\n\t\t?>\n\t\t<style type=\"text/css\">html{background-color: transparent;}</style>\n\t\t<?php\n\n\t\tif ( 'success' ===  $interim_login )\n\t\t\t$classes[] = 'interim-login-success';\n\t}\n\n\t$classes = apply_filters( 'login_body_class', $classes, $action );\n\n\t?>\n\t</head>\n\t<body class=\"login <?php echo esc_attr( implode( ' ', $classes ) ); ?>\">\n\t<div id=\"login\">\n\t\t<h1><a href=\"<?php echo esc_url( $login_header_url ); ?>\" title=\"<?php echo esc_attr( $login_header_title ); ?>\"><?php bloginfo( 'name' ); ?></a></h1>\n\t<?php\n\n\tunset( $login_header_url, $login_header_title );\n\n\t$message = apply_filters('login_message', $message);\n\tif ( !empty( $message ) )\n\t\techo $message . \"\\n\";\n\n\t// In case a plugin uses $error rather than the $wp_errors object\n\tif ( !empty( $error ) ) {\n\t\t$wp_error->add('error', $error);\n\t\tunset($error);\n\t}\n\n\tif ( $wp_error->get_error_code() ) {\n\t\t$errors = '';\n\t\t$messages = '';\n\t\tforeach ( $wp_error->get_error_codes() as $code ) {\n\t\t\t$severity = $wp_error->get_error_data($code);\n\t\t\tforeach ( $wp_error->get_error_messages($code) as $error ) {\n\t\t\t\tif ( 'message' == $severity )\n\t\t\t\t\t$messages .= '\t' . $error . \"<br />\\n\";\n\t\t\t\telse\n\t\t\t\t\t$errors .= '\t' . $error . \"<br />\\n\";\n\t\t\t}\n\t\t}\n\t\tif ( !empty($errors) )\n\t\t\techo '<div id=\"login_error\">' . apply_filters('login_errors', $errors) . \"</div>\\n\";\n\t\tif ( !empty($messages) )\n\t\t\techo '<p class=\"message\">' . apply_filters('login_messages', $messages) . \"</p>\\n\";\n\t}\n} // End of login_header()\n\n/**\n * Outputs the footer for the login page.\n *\n * @param string $input_id Which input to auto-focus\n */\nfunction login_footer($input_id = '') {\n\tglobal $interim_login;\n\n\t// Don't allow interim logins to navigate away from the page.\n\tif ( ! $interim_login ): ?>\n\t<p id=\"backtoblog\"><a href=\"<?php echo esc_url( home_url( '/' ) ); ?>\" title=\"<?php esc_attr_e( 'Are you lost?' ); ?>\"><?php printf( __( '&larr; Back to %s' ), get_bloginfo( 'title', 'display' ) ); ?></a></p>\n\t<?php endif; ?>\n\n\t</div>\n\n\t<?php if ( !empty($input_id) ) : ?>\n\t<script type=\"text/javascript\">\n\ttry{document.getElementById('<?php echo $input_id; ?>').focus();}catch(e){}\n\tif(typeof wpOnload=='function')wpOnload();\n\t</script>\n\t<?php endif; ?>\n\n\t<?php do_action('login_footer'); ?>\n\t<div class=\"clear\"></div>\n\t</body>\n\t</html>\n\t<?php\n}\n\nfunction wp_shake_js() {\n\tif ( wp_is_mobile() )\n\t\treturn;\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nfunction s(id,pos){g(id).left=pos+'px';}\nfunction g(id){return document.getElementById(id).style;}\nfunction shake(id,a,d){c=a.shift();s(id,c);if(a.length>0){setTimeout(function(){shake(id,a,d);},d);}else{try{g(id).position='static';wp_attempt_focus();}catch(e){}}}\naddLoadEvent(function(){ var p=new Array(15,30,15,0,-15,-30,-15,0);p=p.concat(p.concat(p));var i=document.forms[0].id;g(i).position='relative';shake(i,p,20);});\n</script>\n<?php\n}\n\n/**\n * Handles sending password retrieval email to user.\n *\n * @uses $wpdb WordPress Database object\n *\n * @return bool|WP_Error True: when finish. WP_Error on error\n */\nfunction retrieve_password() {\n\tglobal $wpdb, $current_site;\n\n\t$errors = new WP_Error();\n\n\tif ( empty( $_POST['user_login'] ) ) {\n\t\t$errors->add('empty_username', __('<strong>ERROR</strong>: Enter a username or e-mail address.'));\n\t} else if ( strpos( $_POST['user_login'], '@' ) ) {\n\t\t$user_data = get_user_by( 'email', trim( $_POST['user_login'] ) );\n\t\tif ( empty( $user_data ) )\n\t\t\t$errors->add('invalid_email', __('<strong>ERROR</strong>: There is no user registered with that email address.'));\n\t} else {\n\t\t$login = trim($_POST['user_login']);\n\t\t$user_data = get_user_by('login', $login);\n\t}\n\n\tdo_action('lostpassword_post');\n\n\tif ( $errors->get_error_code() )\n\t\treturn $errors;\n\n\tif ( !$user_data ) {\n\t\t$errors->add('invalidcombo', __('<strong>ERROR</strong>: Invalid username or e-mail.'));\n\t\treturn $errors;\n\t}\n\n\t// redefining user_login ensures we return the right case in the email\n\t$user_login = $user_data->user_login;\n\t$user_email = $user_data->user_email;\n\n\tdo_action('retreive_password', $user_login);  // Misspelled and deprecated\n\tdo_action('retrieve_password', $user_login);\n\n\t$allow = apply_filters('allow_password_reset', true, $user_data->ID);\n\n\tif ( ! $allow )\n\t\treturn new WP_Error('no_password_reset', __('Password reset is not allowed for this user'));\n\telse if ( is_wp_error($allow) )\n\t\treturn $allow;\n\n\t$key = $wpdb->get_var($wpdb->prepare(\"SELECT user_activation_key FROM $wpdb->users WHERE user_login = %s\", $user_login));\n\tif ( empty($key) ) {\n\t\t// Generate something random for a key...\n\t\t$key = wp_generate_password(20, false);\n\t\tdo_action('retrieve_password_key', $user_login, $key);\n\t\t// Now insert the new md5 key into the db\n\t\t$wpdb->update($wpdb->users, array('user_activation_key' => $key), array('user_login' => $user_login));\n\t}\n\t$message = __('Someone requested that the password be reset for the following account:') . \"\\r\\n\\r\\n\";\n\t$message .= network_home_url( '/' ) . \"\\r\\n\\r\\n\";\n\t$message .= sprintf(__('Username: %s'), $user_login) . \"\\r\\n\\r\\n\";\n\t$message .= __('If this was a mistake, just ignore this email and nothing will happen.') . \"\\r\\n\\r\\n\";\n\t$message .= __('To reset your password, visit the following address:') . \"\\r\\n\\r\\n\";\n\t$message .= '<' . network_site_url(\"wp-login.php?action=rp&key=$key&login=\" . rawurlencode($user_login), 'login') . \">\\r\\n\";\n\n\tif ( is_multisite() )\n\t\t$blogname = $GLOBALS['current_site']->site_name;\n\telse\n\t\t// The blogname option is escaped with esc_html on the way into the database in sanitize_option\n\t\t// we want to reverse this for the plain text arena of emails.\n\t\t$blogname = wp_specialchars_decode(get_option('blogname'), ENT_QUOTES);\n\n\t$title = sprintf( __('[%s] Password Reset'), $blogname );\n\n\t$title = apply_filters('retrieve_password_title', $title);\n\t$message = apply_filters('retrieve_password_message', $message, $key);\n\n\tif ( $message && !wp_mail($user_email, $title, $message) )\n\t\twp_die( __('The e-mail could not be sent.') . \"<br />\\n\" . __('Possible reason: your host may have disabled the mail() function.') );\n\n\treturn true;\n}\n\n/**\n * Retrieves a user row based on password reset key and login\n *\n * @uses $wpdb WordPress Database object\n *\n * @param string $key Hash to validate sending user's password\n * @param string $login The user login\n * @return object|WP_Error User's database row on success, error object for invalid keys\n */\nfunction check_password_reset_key($key, $login) {\n\tglobal $wpdb;\n\n\t$key = preg_replace('/[^a-z0-9]/i', '', $key);\n\n\tif ( empty( $key ) || !is_string( $key ) )\n\t\treturn new WP_Error('invalid_key', __('Invalid key'));\n\n\tif ( empty($login) || !is_string($login) )\n\t\treturn new WP_Error('invalid_key', __('Invalid key'));\n\n\t$user = $wpdb->get_row($wpdb->prepare(\"SELECT * FROM $wpdb->users WHERE user_activation_key = %s AND user_login = %s\", $key, $login));\n\n\tif ( empty( $user ) )\n\t\treturn new WP_Error('invalid_key', __('Invalid key'));\n\n\treturn $user;\n}\n\n/**\n * Handles resetting the user's password.\n *\n * @param object $user The user\n * @param string $new_pass New password for the user in plaintext\n */\nfunction reset_password($user, $new_pass) {\n\tdo_action('password_reset', $user, $new_pass);\n\n\twp_set_password($new_pass, $user->ID);\n\n\twp_password_change_notification($user);\n}\n\n/**\n * Handles registering a new user.\n *\n * @param string $user_login User's username for logging in\n * @param string $user_email User's email address to send password and add\n * @return int|WP_Error Either user's ID or error on failure.\n */\nfunction register_new_user( $user_login, $user_email ) {\n\t$errors = new WP_Error();\n\n\t$sanitized_user_login = sanitize_user( $user_login );\n\t$user_email = apply_filters( 'user_registration_email', $user_email );\n\n\t// Check the username\n\tif ( $sanitized_user_login == '' ) {\n\t\t$errors->add( 'empty_username', __( '<strong>ERROR</strong>: Please enter a username.' ) );\n\t} elseif ( ! validate_username( $user_login ) ) {\n\t\t$errors->add( 'invalid_username', __( '<strong>ERROR</strong>: This username is invalid because it uses illegal characters. Please enter a valid username.' ) );\n\t\t$sanitized_user_login = '';\n\t} elseif ( username_exists( $sanitized_user_login ) ) {\n\t\t$errors->add( 'username_exists', __( '<strong>ERROR</strong>: This username is already registered. Please choose another one.' ) );\n\t}\n\n\t// Check the e-mail address\n\tif ( $user_email == '' ) {\n\t\t$errors->add( 'empty_email', __( '<strong>ERROR</strong>: Please type your e-mail address.' ) );\n\t} elseif ( ! is_email( $user_email ) ) {\n\t\t$errors->add( 'invalid_email', __( '<strong>ERROR</strong>: The email address isn&#8217;t correct.' ) );\n\t\t$user_email = '';\n\t} elseif ( email_exists( $user_email ) ) {\n\t\t$errors->add( 'email_exists', __( '<strong>ERROR</strong>: This email is already registered, please choose another one.' ) );\n\t}\n\n\tdo_action( 'register_post', $sanitized_user_login, $user_email, $errors );\n\n\t$errors = apply_filters( 'registration_errors', $errors, $sanitized_user_login, $user_email );\n\n\tif ( $errors->get_error_code() )\n\t\treturn $errors;\n\n\t$user_pass = wp_generate_password( 12, false);\n\t$user_id = wp_create_user( $sanitized_user_login, $user_pass, $user_email );\n\tif ( ! $user_id ) {\n\t\t$errors->add( 'registerfail', sprintf( __( '<strong>ERROR</strong>: Couldn&#8217;t register you&hellip; please contact the <a href=\"mailto:%s\">webmaster</a> !' ), get_option( 'admin_email' ) ) );\n\t\treturn $errors;\n\t}\n\n\tupdate_user_option( $user_id, 'default_password_nag', true, true ); //Set up the Password change nag.\n\n\twp_new_user_notification( $user_id, $user_pass );\n\n\treturn $user_id;\n}\n\n//\n// Main\n//\n\n$action = isset($_REQUEST['action']) ? $_REQUEST['action'] : 'login';\n$errors = new WP_Error();\n\nif ( isset($_GET['key']) )\n\t$action = 'resetpass';\n\n// validate action so as to default to the login screen\nif ( !in_array( $action, array( 'postpass', 'logout', 'lostpassword', 'retrievepassword', 'resetpass', 'rp', 'register', 'login' ), true ) && false === has_filter( 'login_form_' . $action ) )\n\t$action = 'login';\n\nnocache_headers();\n\nheader('Content-Type: '.get_bloginfo('html_type').'; charset='.get_bloginfo('charset'));\n\nif ( defined( 'RELOCATE' ) && RELOCATE ) { // Move flag is set\n\tif ( isset( $_SERVER['PATH_INFO'] ) && ($_SERVER['PATH_INFO'] != $_SERVER['PHP_SELF']) )\n\t\t$_SERVER['PHP_SELF'] = str_replace( $_SERVER['PATH_INFO'], '', $_SERVER['PHP_SELF'] );\n\n\t$url = dirname( set_url_scheme( 'http://' .  $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'] ) );\n\tif ( $url != get_option( 'siteurl' ) )\n\t\tupdate_option( 'siteurl', $url );\n}\n\n//Set a cookie now to see if they are supported by the browser.\nsetcookie(TEST_COOKIE, 'WP Cookie check', 0, COOKIEPATH, COOKIE_DOMAIN);\nif ( SITECOOKIEPATH != COOKIEPATH )\n\tsetcookie(TEST_COOKIE, 'WP Cookie check', 0, SITECOOKIEPATH, COOKIE_DOMAIN);\n\n// allow plugins to override the default actions, and to add extra actions if they want\ndo_action( 'login_init' );\ndo_action( 'login_form_' . $action );\n\n$http_post = ('POST' == $_SERVER['REQUEST_METHOD']);\n$interim_login = isset($_REQUEST['interim-login']);\n\nswitch ($action) {\n\ncase 'postpass' :\n\trequire_once ABSPATH . 'wp-includes/class-phpass.php';\n\t$hasher = new PasswordHash( 8, true );\n\n\t// 10 days\n\tsetcookie( 'wp-postpass_' . COOKIEHASH, $hasher->HashPassword( wp_unslash( $_POST['post_password'] ) ), time() + 10 * DAY_IN_SECONDS, COOKIEPATH );\n\n\twp_safe_redirect( wp_get_referer() );\n\texit();\n\nbreak;\n\ncase 'logout' :\n\tcheck_admin_referer('log-out');\n\twp_logout();\n\n\t$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?loggedout=true';\n\twp_safe_redirect( $redirect_to );\n\texit();\n\nbreak;\n\ncase 'lostpassword' :\ncase 'retrievepassword' :\n\n\tif ( $http_post ) {\n\t\t$errors = retrieve_password();\n\t\tif ( !is_wp_error($errors) ) {\n\t\t\t$redirect_to = !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : 'wp-login.php?checkemail=confirm';\n\t\t\twp_safe_redirect( $redirect_to );\n\t\t\texit();\n\t\t}\n\t}\n\n\tif ( isset($_GET['error']) && 'invalidkey' == $_GET['error'] ) $errors->add('invalidkey', __('Sorry, that key does not appear to be valid.'));\n\t$redirect_to = apply_filters( 'lostpassword_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );\n\n\tdo_action('lost_password');\n\tlogin_header(__('Lost Password'), '<p class=\"message\">' . __('Please enter your username or email address. You will receive a link to create a new password via email.') . '</p>', $errors);\n\n\t$user_login = isset($_POST['user_login']) ? wp_unslash($_POST['user_login']) : '';\n\n?>\n\n<form name=\"lostpasswordform\" id=\"lostpasswordform\" action=\"<?php echo esc_url( site_url( 'wp-login.php?action=lostpassword', 'login_post' ) ); ?>\" method=\"post\">\n\t<p>\n\t\t<label for=\"user_login\" ><?php _e('Username or E-mail:') ?><br />\n\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" class=\"input\" value=\"<?php echo esc_attr($user_login); ?>\" size=\"20\" /></label>\n\t</p>\n<?php do_action('lostpassword_form'); ?>\n\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e('Get New Password'); ?>\" /></p>\n</form>\n\n<p id=\"nav\">\n<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e('Log in') ?></a>\n<?php if ( get_option( 'users_can_register' ) ) : ?>\n | <?php echo apply_filters( 'register', sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) ) ); ?>\n<?php endif; ?>\n</p>\n\n<?php\nlogin_footer('user_login');\nbreak;\n\ncase 'resetpass' :\ncase 'rp' :\n\t$user = check_password_reset_key($_GET['key'], $_GET['login']);\n\n\tif ( is_wp_error($user) ) {\n\t\twp_redirect( site_url('wp-login.php?action=lostpassword&error=invalidkey') );\n\t\texit;\n\t}\n\n\t$errors = new WP_Error();\n\n\tif ( isset($_POST['pass1']) && $_POST['pass1'] != $_POST['pass2'] )\n\t\t$errors->add( 'password_reset_mismatch', __( 'The passwords do not match.' ) );\n\n\tdo_action( 'validate_password_reset', $errors, $user );\n\n\tif ( ( ! $errors->get_error_code() ) && isset( $_POST['pass1'] ) && !empty( $_POST['pass1'] ) ) {\n\t\treset_password($user, $_POST['pass1']);\n\t\tlogin_header( __( 'Password Reset' ), '<p class=\"message reset-pass\">' . __( 'Your password has been reset.' ) . ' <a href=\"' . esc_url( wp_login_url() ) . '\">' . __( 'Log in' ) . '</a></p>' );\n\t\tlogin_footer();\n\t\texit;\n\t}\n\n\twp_enqueue_script('utils');\n\twp_enqueue_script('user-profile');\n\n\tlogin_header(__('Reset Password'), '<p class=\"message reset-pass\">' . __('Enter your new password below.') . '</p>', $errors );\n\n?>\n<form name=\"resetpassform\" id=\"resetpassform\" action=\"<?php echo esc_url( site_url( 'wp-login.php?action=resetpass&key=' . urlencode( $_GET['key'] ) . '&login=' . urlencode( $_GET['login'] ), 'login_post' ) ); ?>\" method=\"post\" autocomplete=\"off\">\n\t<input type=\"hidden\" id=\"user_login\" value=\"<?php echo esc_attr( $_GET['login'] ); ?>\" autocomplete=\"off\" />\n\n\t<p>\n\t\t<label for=\"pass1\"><?php _e('New password') ?><br />\n\t\t<input type=\"password\" name=\"pass1\" id=\"pass1\" class=\"input\" size=\"20\" value=\"\" autocomplete=\"off\" /></label>\n\t</p>\n\t<p>\n\t\t<label for=\"pass2\"><?php _e('Confirm new password') ?><br />\n\t\t<input type=\"password\" name=\"pass2\" id=\"pass2\" class=\"input\" size=\"20\" value=\"\" autocomplete=\"off\" /></label>\n\t</p>\n\n\t<div id=\"pass-strength-result\" class=\"hide-if-no-js\"><?php _e('Strength indicator'); ?></div>\n\t<p class=\"description indicator-hint\"><?php _e('Hint: The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like ! \" ? $ % ^ &amp; ).'); ?></p>\n\n\t<br class=\"clear\" />\n\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e('Reset Password'); ?>\" /></p>\n</form>\n\n<p id=\"nav\">\n<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a>\n<?php if ( get_option( 'users_can_register' ) ) : ?>\n | <?php echo apply_filters( 'register', sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) ) ); ?>\n<?php endif; ?>\n</p>\n\n<?php\nlogin_footer('user_pass');\nbreak;\n\ncase 'register' :\n\tif ( is_multisite() ) {\n\t\t// Multisite uses wp-signup.php\n\t\twp_redirect( apply_filters( 'wp_signup_location', network_site_url('wp-signup.php') ) );\n\t\texit;\n\t}\n\n\tif ( !get_option('users_can_register') ) {\n\t\twp_redirect( site_url('wp-login.php?registration=disabled') );\n\t\texit();\n\t}\n\n\t$user_login = '';\n\t$user_email = '';\n\tif ( $http_post ) {\n\t\t$user_login = $_POST['user_login'];\n\t\t$user_email = $_POST['user_email'];\n\t\t$errors = register_new_user($user_login, $user_email);\n\t\tif ( !is_wp_error($errors) ) {\n\t\t\t$redirect_to = !empty( $_POST['redirect_to'] ) ? $_POST['redirect_to'] : 'wp-login.php?checkemail=registered';\n\t\t\twp_safe_redirect( $redirect_to );\n\t\t\texit();\n\t\t}\n\t}\n\n\t$redirect_to = apply_filters( 'registration_redirect', !empty( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '' );\n\tlogin_header(__('Registration Form'), '<p class=\"message register\">' . __('Register For This Site') . '</p>', $errors);\n?>\n\n<form name=\"registerform\" id=\"registerform\" action=\"<?php echo esc_url( site_url('wp-login.php?action=register', 'login_post') ); ?>\" method=\"post\">\n\t<p>\n\t\t<label for=\"user_login\"><?php _e('Username') ?><br />\n\t\t<input type=\"text\" name=\"user_login\" id=\"user_login\" class=\"input\" value=\"<?php echo esc_attr(wp_unslash($user_login)); ?>\" size=\"20\" /></label>\n\t</p>\n\t<p>\n\t\t<label for=\"user_email\"><?php _e('E-mail') ?><br />\n\t\t<input type=\"text\" name=\"user_email\" id=\"user_email\" class=\"input\" value=\"<?php echo esc_attr(wp_unslash($user_email)); ?>\" size=\"25\" /></label>\n\t</p>\n<?php do_action('register_form'); ?>\n\t<p id=\"reg_passmail\"><?php _e('A password will be e-mailed to you.') ?></p>\n\t<br class=\"clear\" />\n\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr( $redirect_to ); ?>\" />\n\t<p class=\"submit\"><input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e('Register'); ?>\" /></p>\n</form>\n\n<p id=\"nav\">\n<a href=\"<?php echo esc_url( wp_login_url() ); ?>\"><?php _e( 'Log in' ); ?></a> |\n<a href=\"<?php echo esc_url( wp_lostpassword_url() ); ?>\" title=\"<?php esc_attr_e( 'Password Lost and Found' ) ?>\"><?php _e( 'Lost your password?' ); ?></a>\n</p>\n\n<?php\nlogin_footer('user_login');\nbreak;\n\ncase 'login' :\ndefault:\n\t$secure_cookie = '';\n\t$customize_login = isset( $_REQUEST['customize-login'] );\n\tif ( $customize_login )\n\t\twp_enqueue_script( 'customize-base' );\n\n\t// If the user wants ssl but the session is not ssl, force a secure cookie.\n\tif ( !empty($_POST['log']) && !force_ssl_admin() ) {\n\t\t$user_name = sanitize_user($_POST['log']);\n\t\tif ( $user = get_user_by('login', $user_name) ) {\n\t\t\tif ( get_user_option('use_ssl', $user->ID) ) {\n\t\t\t\t$secure_cookie = true;\n\t\t\t\tforce_ssl_admin(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( isset( $_REQUEST['redirect_to'] ) ) {\n\t\t$redirect_to = $_REQUEST['redirect_to'];\n\t\t// Redirect to https if user wants ssl\n\t\tif ( $secure_cookie && false !== strpos($redirect_to, 'wp-admin') )\n\t\t\t$redirect_to = preg_replace('|^http://|', 'https://', $redirect_to);\n\t} else {\n\t\t$redirect_to = admin_url();\n\t}\n\n\t$reauth = empty($_REQUEST['reauth']) ? false : true;\n\n\t// If the user was redirected to a secure login form from a non-secure admin page, and secure login is required but secure admin is not, then don't use a secure\n\t// cookie and redirect back to the referring non-secure admin page. This allows logins to always be POSTed over SSL while allowing the user to choose visiting\n\t// the admin via http or https.\n\tif ( !$secure_cookie && is_ssl() && force_ssl_login() && !force_ssl_admin() && ( 0 !== strpos($redirect_to, 'https') ) && ( 0 === strpos($redirect_to, 'http') ) )\n\t\t$secure_cookie = false;\n\n\t$user = wp_signon('', $secure_cookie);\n\n\t$redirect_to = apply_filters('login_redirect', $redirect_to, isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '', $user);\n\n\tif ( !is_wp_error($user) && !$reauth ) {\n\t\tif ( $interim_login ) {\n\t\t\t$message = '<p class=\"message\">' . __('You have logged in successfully.') . '</p>';\n\t\t\t$interim_login = 'success';\n\t\t\tlogin_header( '', $message ); ?>\n\t\t\t</div>\n\t\t\t<?php do_action( 'login_footer' ); ?>\n\t\t\t<?php if ( $customize_login ) : ?>\n\t\t\t\t<script type=\"text/javascript\">setTimeout( function(){ new wp.customize.Messenger({ url: '<?php echo wp_customize_url(); ?>', channel: 'login' }).send('login') }, 1000 );</script>\n\t\t\t<?php endif; ?>\n\t\t\t</body></html>\n<?php\t\texit;\n\t\t}\n\n\t\tif ( ( empty( $redirect_to ) || $redirect_to == 'wp-admin/' || $redirect_to == admin_url() ) ) {\n\t\t\t// If the user doesn't belong to a blog, send them to user admin. If the user can't edit posts, send them to their profile.\n\t\t\tif ( is_multisite() && !get_active_blog_for_user($user->ID) && !is_super_admin( $user->ID ) )\n\t\t\t\t$redirect_to = user_admin_url();\n\t\t\telseif ( is_multisite() && !$user->has_cap('read') )\n\t\t\t\t$redirect_to = get_dashboard_url( $user->ID );\n\t\t\telseif ( !$user->has_cap('edit_posts') )\n\t\t\t\t$redirect_to = admin_url('profile.php');\n\t\t}\n\t\twp_safe_redirect($redirect_to);\n\t\texit();\n\t}\n\n\t$errors = $user;\n\t// Clear errors if loggedout is set.\n\tif ( !empty($_GET['loggedout']) || $reauth )\n\t\t$errors = new WP_Error();\n\n\t// If cookies are disabled we can't log in even with a valid user+pass\n\tif ( isset($_POST['testcookie']) && empty($_COOKIE[TEST_COOKIE]) )\n\t\t$errors->add('test_cookie', __(\"<strong>ERROR</strong>: Cookies are blocked or not supported by your browser. You must <a href='http://www.google.com/cookies.html'>enable cookies</a> to use WordPress.\"));\n\n\tif ( $interim_login ) {\n\t\tif ( ! $errors->get_error_code() )\n\t\t\t$errors->add('expired', __('Session expired. Please log in again. You will not move away from this page.'), 'message');\n\t} else {\n\t\t// Some parts of this script use the main login form to display a message\n\t\tif\t\t( isset($_GET['loggedout']) && true == $_GET['loggedout'] )\n\t\t\t$errors->add('loggedout', __('You are now logged out.'), 'message');\n\t\telseif\t( isset($_GET['registration']) && 'disabled' == $_GET['registration'] )\n\t\t\t$errors->add('registerdisabled', __('User registration is currently not allowed.'));\n\t\telseif\t( isset($_GET['checkemail']) && 'confirm' == $_GET['checkemail'] )\n\t\t\t$errors->add('confirm', __('Check your e-mail for the confirmation link.'), 'message');\n\t\telseif\t( isset($_GET['checkemail']) && 'newpass' == $_GET['checkemail'] )\n\t\t\t$errors->add('newpass', __('Check your e-mail for your new password.'), 'message');\n\t\telseif\t( isset($_GET['checkemail']) && 'registered' == $_GET['checkemail'] )\n\t\t\t$errors->add('registered', __('Registration complete. Please check your e-mail.'), 'message');\n\t\telseif ( strpos( $redirect_to, 'about.php?updated' ) )\n\t\t\t$errors->add('updated', __( '<strong>You have successfully updated WordPress!</strong> Please log back in to experience the awesomeness.' ), 'message' );\n\t}\n\n\t$errors = apply_filters( 'wp_login_errors', $errors, $redirect_to );\n\n\t// Clear any stale cookies.\n\tif ( $reauth )\n\t\twp_clear_auth_cookie();\n\n\tlogin_header(__('Log In'), '', $errors);\n\n\tif ( isset($_POST['log']) )\n\t\t$user_login = ( 'incorrect_password' == $errors->get_error_code() || 'empty_password' == $errors->get_error_code() ) ? esc_attr(wp_unslash($_POST['log'])) : '';\n\t$rememberme = ! empty( $_POST['rememberme'] );\n?>\n\n<form name=\"loginform\" id=\"loginform\" action=\"<?php echo esc_url( site_url( 'wp-login.php', 'login_post' ) ); ?>\" method=\"post\">\n\t<p>\n\t\t<label for=\"user_login\"><?php _e('Username') ?><br />\n\t\t<input type=\"text\" name=\"log\" id=\"user_login\" class=\"input\" value=\"<?php echo esc_attr($user_login); ?>\" size=\"20\" /></label>\n\t</p>\n\t<p>\n\t\t<label for=\"user_pass\"><?php _e('Password') ?><br />\n\t\t<input type=\"password\" name=\"pwd\" id=\"user_pass\" class=\"input\" value=\"\" size=\"20\" /></label>\n\t</p>\n<?php do_action('login_form'); ?>\n\t<p class=\"forgetmenot\"><label for=\"rememberme\"><input name=\"rememberme\" type=\"checkbox\" id=\"rememberme\" value=\"forever\" <?php checked( $rememberme ); ?> /> <?php esc_attr_e('Remember Me'); ?></label></p>\n\t<p class=\"submit\">\n\t\t<input type=\"submit\" name=\"wp-submit\" id=\"wp-submit\" class=\"button button-primary button-large\" value=\"<?php esc_attr_e('Log In'); ?>\" />\n<?php\tif ( $interim_login ) { ?>\n\t\t<input type=\"hidden\" name=\"interim-login\" value=\"1\" />\n<?php\t} else { ?>\n\t\t<input type=\"hidden\" name=\"redirect_to\" value=\"<?php echo esc_attr($redirect_to); ?>\" />\n<?php \t} ?>\n<?php   if ( $customize_login ) : ?>\n\t\t<input type=\"hidden\" name=\"customize-login\" value=\"1\" />\n<?php   endif; ?>\n\t\t<input type=\"hidden\" name=\"testcookie\" value=\"1\" />\n\t</p>\n</form>\n\n<?php if ( ! $interim_login ) { ?>\n<p id=\"nav\">\n<?php if ( ! isset( $_GET['checkemail'] ) || ! in_array( $_GET['checkemail'], array( 'confirm', 'newpass' ) ) ) : ?>\n\t<?php if ( get_option( 'users_can_register' ) ) : ?>\n\t\t<?php echo apply_filters( 'register', sprintf( '<a href=\"%s\">%s</a>', esc_url( wp_registration_url() ), __( 'Register' ) ) ); ?> |\n\t<?php endif; ?>\n\t<a href=\"<?php echo esc_url( wp_lostpassword_url() ); ?>\" title=\"<?php esc_attr_e( 'Password Lost and Found' ); ?>\"><?php _e( 'Lost your password?' ); ?></a>\n<?php endif; ?>\n</p>\n<?php } ?>\n\n<script type=\"text/javascript\">\nfunction wp_attempt_focus(){\nsetTimeout( function(){ try{\n<?php if ( $user_login || $interim_login ) { ?>\nd = document.getElementById('user_pass');\nd.value = '';\n<?php } else { ?>\nd = document.getElementById('user_login');\n<?php if ( 'invalid_username' == $errors->get_error_code() ) { ?>\nif( d.value != '' )\nd.value = '';\n<?php\n}\n}?>\nd.focus();\nd.select();\n} catch(e){}\n}, 200);\n}\n\n<?php if ( !$error ) { ?>\nwp_attempt_focus();\n<?php } ?>\nif(typeof wpOnload=='function')wpOnload();\n<?php if ( $interim_login ) { ?>\n(function(){\ntry {\n\tvar i, links = document.getElementsByTagName('a');\n\tfor ( i in links ) {\n\t\tif ( links[i].href )\n\t\t\tlinks[i].target = '_blank';\n\t}\n} catch(e){}\n}());\n<?php } ?>\n</script>\n\n<?php\nlogin_footer();\nbreak;\n} // end action switch\n"]],"start1":0,"start2":0,"length1":0,"length2":29751}]],"length":29751}
{"contributors":[],"silentsave":false,"ts":1381411750069,"patch":[[{"diffs":[[0,"__('"],[-1,"You have logged in"],[1,"Você logou com"],[0," suc"],[-1,"c"],[0,"ess"],[-1,"fully"],[1,"o"],[0,".') "]],"start1":23857,"start2":23857,"length1":39,"length2":30}]],"length":29742,"saved":false}
